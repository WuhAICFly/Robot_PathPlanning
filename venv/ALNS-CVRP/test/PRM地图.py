import time
import math
import numpy as np
import matplotlib.pyplot as plt
from scipy.spatial import KDTree
from celluloid import Camera  # 保存动图时用，pip install celluloid
show_animation = True
plt.rc('font',family='Times New Roman')
def opentxt():
 n=0
 sum=0
 allsum=0
 for n in range(22):
    #filename = '../txt/y_values{}'.format(n)  # py生成文件名
    filename = '../Otxt/pathvalues{}.txt'.format(n)#matlab

    # 读取txt中的数据
    #data = np.loadtxt(filename, delimiter=",")#py
    data = np.loadtxt(filename)#matlab
    # 将数据分离为x和y坐标
    x_list = data[:, 0]
    y_list = data[:, 1]
    #point_list = list(zip(x, y))
    # 计算长度
    length = 0
    for i in range(len(x_list) - 1):
        x1, y1 = x_list[i], y_list[i]
        x2, y2 = x_list[i + 1], y_list[i + 1]
        length += ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    print(length)
    #绘制坐标图
    # if n<4:
    #   plt.plot(x_list, y_list, 'r')
    #   sum+=length
    #   if n==3:
    #     print("老线路0路段长度：",sum)
    #     allsum += sum
    #     sum=0
    # if 4<=n<6:
    #   plt.plot(x_list, y_list, 'g')
    #   sum += length
    #   if n == 5:
    #       print("老线路1路段长度：", sum)
    #       allsum += sum
    #       sum = 0
    # if 6<=n < 8:
    #   plt.plot(x_list, y_list, 'y')
    #   sum += length
    #   if n == 7:
    #       print("老线路2路段长度：", sum)
    #       allsum += sum
    #       sum = 0
    # if 8<=n < 11:
    #   plt.plot(x_list, y_list, 'b')
    #   sum += length
    #   if n == 10:
    #       allsum += sum
    #       print("老线路3路段长度：", sum)
    #       print("老线路长度：", allsum)
    #       sum = 0
    #       allsum=0
    #
    # if 11<=n < 15:
    #  plt.plot(x_list, y_list, 'r')
    #  sum += length
    #  if n == 14:
    #      allsum += sum
    #      print("新线路0路段长度：", sum)
    #      sum = 0
    # if 15<=n < 20:
    #  plt.plot(x_list, y_list, 'g')
    #  sum += length
    #  if n == 19:
    #      allsum += sum
    #      print("新线路1路段长度：", sum)
    #      sum = 0
    # if 20<=n < 22:
    #  plt.plot(x_list, y_list, 'y')
    #  sum += length
    #  if n == 21:
    #      allsum += sum
    #      print("新线路2路段长度：", sum)
    #      print("新线路长度：", allsum)
    #      sum = 0
    #      allsum=0


 # plt.show()


def ReadObstacle(i, list2, list3, times, dtax, dtay):
    filename = str(i) + "." + "txt"
    # 打开文件
    with open(filename, 'r') as f:
        # 定义两个空列表存储提取的数据
        # 循环遍历每一行数据
        for line in f.readlines():
            # 去除每行末尾的空格和换行符
            line = line.strip()
            # 使用空格分隔每行数据
            data = line.split(' ')
            # 将第2个和第3个数据分别存储到对应的列表中
            list2.append(float(data[1]) * times - dtax)
            list3.append(float(data[2]) * times + dtay)

def main(rng=None):
    print(" start!!")
    fig = plt.figure(1)

    # camara = Camera(fig)  # 保存动图时使用
    camara = None
    # start and goal position
    sx = -5.0  # [m]
    sy = 10.0  # [m]
    gx = 25.0  # [m]
    gy = 5.0  # [m]
    robot_size = 1.3  # [m]

    ox = []
    oy = []
    x = []
    y = []
    points = [(-5, 10), (33.2, 9.9), (35.2, 20.5), (39.9, 34.0), (51.4, -1.1), (-9.3, 8.9), (30, 10), (33, 13)]
    points = [(-5, 10),(25,5)]
    sx=-5
    sy=10
    gx=25
    gy=5
    #fig, ax = plt.subplots()
    #plt.scatter([p[0] for p in points], [p[1] for p in points], marker='^', s=60,color="r")
    plt.plot(sx, sy, "^r")
    plt.plot(gx, gy, "^c")
    # for i, p in enumerate(points):
    #     plt.annotate(str(i), (p[0] + 0.7, p[1] - 0.5))
    #plt.show()
    #6 外圈障碍物
    ReadObstacle(6, ox, oy, 1.7, 8, 5)
    p1 = np.array([7.59297399782e-05, 5.93557160755e-07])
    p2 = np.array([-2.49960255623, -1.03229379654])
    points = np.linspace(p1, p2, num=20, endpoint=True)
    # 遍历每个点并将其x、y坐标加入列表中
    for point in points:
        ox.append(point[0] * 1.7 - 8)
        oy.append(point[1] * 1.7 + 5)
    # 1-4障碍物
    for i in range(6):
        ReadObstacle(i, ox, oy, 1, 0, 0)
    # 7障碍物
    ReadObstacle(7, ox, oy, 1.2, -20, 0)
    opentxt()
    if show_animation:
        plt.plot(ox, oy, ".k")


        plt.axis("equal")
        if camara != None:
            camara.snap()
    rx = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
    ry = [10, 11.2394606, 12.42899247, 13.40048004, 14.37196761, 14.99377239, 15.56817888, 16.14258538, 16.71699188,
          17.29139837, 20.39822242, 23.80519111, 24.16959558, 24.3110094, 24.45242322, 24.59383704, 24.73525086,
          24.87666468,
          25.0180785, 25.15949232, 21.23042532, 20.58113894, 19.93185255, 18.29863972, 17.06376829, 16.2021173,
          15.3404663,
          14.00768861, 12.4978392, 9.556195843, 5]
    xx = [-4.9, -4.8, -4.7, -4.6, -4.5, -4.4, -4.3, -4.2, -4.1, -4.0, -3.9, -3.8, -3.7, -3.6, -3.5, -3.4, -3.3, -3.2, -3.1, -3.0, -2.9, -2.8, -2.7, -2.6, -2.5, -2.4, -2.3, -2.2, -2.1, -2.0, -1.9, -1.7999999999999998, -1.7000000000000002, -1.6, -1.5, -1.4, -1.2999999999999998, -1.2000000000000002, -1.1, -1.0, -0.9000000000000004, -0.7999999999999998, -0.7000000000000002, -0.5999999999999996, -0.5, -0.40000000000000036, -0.2999999999999998, -0.20000000000000018, -0.09999999999999964, 0.0, 0.09999999999999964, 0.20000000000000018, 0.2999999999999998, 0.40000000000000036, 0.5, 0.5999999999999996, 0.7000000000000002, 0.7999999999999998, 0.9000000000000004, 1.0, 1.0999999999999996, 1.2000000000000002, 1.2999999999999998, 1.4000000000000004, 1.5, 1.5999999999999996, 1.7000000000000002, 1.7999999999999998, 1.9000000000000004, 2.0, 2.0999999999999996, 2.2, 2.3, 2.4000000000000004, 2.5, 2.5999999999999996, 2.7, 2.8, 2.9000000000000004, 3.0, 3.0999999999999996, 3.1999999999999993, 3.3000000000000007, 3.4000000000000004, 3.5, 3.5999999999999996, 3.6999999999999993, 3.8000000000000007, 3.9000000000000004, 4.0, 4.1, 4.199999999999999, 4.300000000000001, 4.4, 4.5, 4.6, 4.699999999999999, 4.800000000000001, 4.9, 5.0, 5.1, 5.199999999999999, 5.300000000000001, 5.4, 5.5, 5.6, 5.699999999999999, 5.800000000000001, 5.9, 6.0, 6.1, 6.199999999999999, 6.300000000000001, 6.4, 6.5, 6.6, 6.699999999999999, 6.800000000000001, 6.9, 7.0, 7.1, 7.199999999999999, 7.300000000000001, 7.4, 7.5, 7.6, 7.699999999999999, 7.800000000000001, 7.9, 8.0, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9.0, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10.0, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 11.0, 11.100000000000001, 11.2, 11.3, 11.399999999999999, 11.5, 11.600000000000001, 11.7, 11.8, 11.899999999999999, 12.0, 12.100000000000001, 12.2, 12.3, 12.399999999999999, 12.5, 12.600000000000001, 12.7, 12.8, 12.899999999999999, 13.0, 13.100000000000001, 13.2, 13.3, 13.399999999999999, 13.5, 13.600000000000001, 13.7, 13.8, 13.899999999999999, 14.0, 14.100000000000001, 14.2, 14.3, 14.399999999999999, 14.5, 14.600000000000001, 14.7, 14.8, 14.899999999999999, 15.0, 15.100000000000001, 15.2, 15.3, 15.399999999999999, 15.5, 15.600000000000001, 15.7, 15.8, 15.899999999999999, 16.0, 16.1, 16.2, 16.3, 16.4, 16.5, 16.6, 16.7, 16.8, 16.9, 17.0, 17.1, 17.2, 17.3, 17.4, 17.5, 17.6, 17.7, 17.8, 17.9, 18.0, 18.1, 18.2, 18.3, 18.4, 18.5, 18.6, 18.7, 18.8, 18.9, 19.0, 19.1, 19.2, 19.3, 19.4, 19.5, 19.6, 19.7, 19.8, 19.9, 20.0, 20.1, 20.2, 20.3, 20.4, 20.5, 20.6, 20.7, 20.8, 20.9, 21.0, 21.1, 21.2, 21.3, 21.4, 21.5, 21.6, 21.7, 21.8, 21.9, 22.0, 22.1, 22.2, 22.3, 22.4, 22.5, 22.6, 22.7, 22.8, 22.9, 23.0, 23.1, 23.2, 23.3, 23.4, 23.5, 23.6, 23.7, 23.8, 23.9, 24.0, 24.1, 24.2, 24.3, 24.4, 24.5, 24.6, 24.7, 24.8, 24.9, 25.0]

    yy = [10.001, 10.006, 10.02, 10.046, 10.084, 10.136, 10.203, 10.285, 10.381, 10.489, 10.61, 10.741, 10.882, 11.031,
          11.186, 11.346, 11.509, 11.674, 11.84, 12.005, 12.169, 12.33, 12.487, 12.641, 12.789, 12.933, 13.072, 13.205,
          13.333, 13.456, 13.573, 13.684, 13.791, 13.893, 13.99, 14.082, 14.171, 14.255, 14.336, 14.414, 14.489, 14.561,
          14.63, 14.698, 14.763, 14.827, 14.889, 14.95, 15.01, 15.068, 15.125, 15.181, 15.237, 15.291, 15.344, 15.396,
          15.446, 15.496, 15.544, 15.59, 15.635, 15.679, 15.722, 15.763, 15.802, 15.841, 15.878, 15.915, 15.951, 15.987,
          16.024, 16.062, 16.101, 16.142, 16.187, 16.236, 16.289, 16.349, 16.415, 16.489, 16.571, 16.664, 16.767,
          16.883,
          17.011, 17.152, 17.308, 17.478, 17.663, 17.863, 18.078, 18.306, 18.548, 18.802, 19.067, 19.341, 19.624,
          19.912,
          20.205, 20.499, 20.794, 21.087, 21.376, 21.66, 21.935, 22.2, 22.454, 22.695, 22.922, 23.133, 23.328, 23.506,
          23.668, 23.813, 23.941, 24.054, 24.152, 24.235, 24.305, 24.362, 24.409, 24.445, 24.472, 24.491, 24.504, 24.51,
          24.512, 24.51, 24.505, 24.498, 24.489, 24.48, 24.47, 24.461, 24.452, 24.444, 24.438, 24.432, 24.429, 24.426,
          24.426, 24.427, 24.43, 24.435, 24.441, 24.45, 24.459, 24.471, 24.484, 24.498, 24.514, 24.532, 24.551, 24.572,
          24.595, 24.619, 24.644, 24.672, 24.701, 24.731, 24.763, 24.796, 24.831, 24.866, 24.903, 24.939, 24.976,
          25.013,
          25.048, 25.082, 25.114, 25.143, 25.169, 25.19, 25.205, 25.213, 25.215, 25.207, 25.19, 25.163, 25.124, 25.073,
          25.01, 24.932, 24.841, 24.736, 24.616, 24.481, 24.333, 24.172, 23.998, 23.814, 23.62, 23.42, 23.214, 23.004,
          22.794, 22.584, 22.377, 22.175, 21.979, 21.79, 21.608, 21.436, 21.271, 21.116, 20.969, 20.83, 20.699, 20.575,
          20.457, 20.344, 20.236, 20.132, 20.03, 19.93, 19.83, 19.731, 19.631, 19.529, 19.425, 19.319, 19.21, 19.099,
          18.986,
          18.87, 18.751, 18.631, 18.51, 18.387, 18.264, 18.14, 18.016, 17.893, 17.77, 17.649, 17.529, 17.412, 17.296,
          17.182,
          17.071, 16.962, 16.856, 16.752, 16.651, 16.552, 16.455, 16.36, 16.266, 16.174, 16.083, 15.993, 15.904, 15.814,
          15.725, 15.635, 15.544, 15.453, 15.359, 15.264, 15.167, 15.068, 14.966, 14.861, 14.752, 14.64, 14.524, 14.403,
          14.277, 14.146, 14.01, 13.867, 13.716, 13.559, 13.393, 13.218, 13.034, 12.839, 12.634, 12.418, 12.189, 11.948,
          11.693, 11.425, 11.143, 10.847, 10.536, 10.209, 9.8675, 9.51, 9.1367, 8.7472, 8.3415, 7.9195, 7.4812, 7.0263,
          6.555, 6.0671, 5.5628, 5.0419]
    plt.plot(rx, ry, label=' Original Trajectory')
    plt.plot(xx, yy, label=' Smooth trajectory')
    w1 = 100
    # 添加标题和坐标轴标签以及图例
    plt.title('w1=' + str(w1))
    # plt.xlabel("time(s)")
    # plt.ylabel(" Smooth trajectory(m)")
    plt.legend()
    # plt.show()
    plt.grid(False)
    plt.show()

if __name__ == '__main__':
    main()